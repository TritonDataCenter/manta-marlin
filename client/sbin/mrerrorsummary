#!/usr/bin/env node
/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */

/*
 * Copyright (c) 2014, Joyent, Inc.
 */

var mod_util = require('util');

var esRetryable, esNonretryable;
var esNRetryable, esNNonretryable, esNUnclassified;

function main()
{
	esRetryable = new ErrorSummary();
	esNonretryable = new ErrorSummary();

	esNRetryable = 0;
	esNNonretryable = 0;
	esNUnclassified = 0;

	readLines(process.stdin, onLine, onEnd);
	process.stdin.resume();
}

/* XXX begin copy/paste from "hist" */
var fprintf = function (stream) {
	process.stdout.write(mod_util.format.apply(
	    null, Array.prototype.slice.call(arguments, 1)));
};

/*
 * This would be better implemented as a proper Node stream with flow control,
 * but the immediate goal is simplicity and avoiding dependencies.  If we start
 * running this in low-memory, non-interactive contexts, this should be
 * addressed.
 */
function readLines(stream, online, onend)
{
	var rlstate = {
	    'rl_buffered': '',
	    'rl_isdone': false,
	    'rl_online': online,
	    'rl_onend': onend,
	    'rl_nlines': 1
	};

	stream.on('data', function (chunk) {
		rlstate.rl_buffered += chunk.toString('utf8');
		readLinesProcessBuffered(rlstate);
	});

	stream.on('end', function () {
		rlstate.rl_isdone = true;
		readLinesProcessBuffered(rlstate);
	});
}

function readLinesProcessBuffered(rlstate)
{
	var lines = rlstate.rl_buffered.split(/\n/);
	var callback, i, nlines;

	if (!rlstate.rl_isdone) {
		rlstate.rl_buffered = lines[lines.length - 1];
		nlines = lines.length - 1;
	} else {
		nlines = lines.length;

		if (lines[nlines - 1].length === 0)
			nlines--;
	}

	callback = rlstate.rl_online;
	for (i = 0; i < nlines; i++)
		callback(lines[i], rlstate.rl_nlines++);

	if (rlstate.rl_isdone)
		rlstate.rl_onend();
}

function pad(width, str)
{
	str = str.toString();
	while (str.length < width)
		str = ' ' + str;
	return (str);
}

/* XXX end copy/paste from "hist" */

function onLine(line)
{
	var error = JSON.parse(line);
	var retried = error['value']['retried'] || '';

	if (retried.toUpperCase() == 'TRUE') {
		esNRetryable++;
		esRetryable.aggregate(error);
	} else if (retried.toUpperCase() == 'FALSE') {
		esNNonretryable++;
		esNonretryable.aggregate(error);
	} else {
		esNUnclassified++;
	}
}

function onEnd()
{
	console.log('Failures by count');
	console.log('%s non-retried errors', pad(9, esNNonretryable));
	console.log('%s retries', pad(9, esNRetryable));
	console.log('%s unclassified errors', pad(9, esNUnclassified));

	if (esNNonretryable > 0) {
		console.log('\nNon-retried errors');
		esNonretryable.print(process.stdout);
	}

	if (esNRetryable > 0) {
		console.log('\nRetried errors');
		esRetryable.print(process.stdout);
	}
}

function ErrorSummary()
{
	this.es_bycode = {};
	this.es_bykey = {};
}

ErrorSummary.prototype.aggregate = function (error)
{
	var code = error['value']['errorCode'];
	var subkey;

	if (!this.es_bycode.hasOwnProperty(code)) {
		this.es_bycode[code] = 0;
		this.es_bykey[code] = {};
	}

	if (error['value'].hasOwnProperty('errorMessageInternal')) {
		subkey = error['value']['errorMessage'] + ' (' +
		    error['value']['errorMessageInternal'] + ')';
	} else {
		subkey = error['value']['errorMessage'];
	}

	/*
	 * We remove the input object from the error messages so that similar
	 * messages on different inputs don't show up as different.
	 */
	if (error['value'].hasOwnProperty('input'))
		subkey = subkey.replace(error['value']['input'], '...');

	/*
	 * Do the same for errors referring to assets, where we haven't broken
	 * the asset's name out into the error object.
	 */
	if (code == 'TaskInitError') {
		/* JSSTYLED */
		subkey = subkey.replace(/error retrieving asset ".*"/,
		    'error retrieving asset "..."');
		subkey = subkey.replace(/first of \d+ errors?: /, '... ');
	}

	/*
	 * The "failed to load object" error includes a giant hunk of JSON.  Try
	 * to remove it here.
	 */
	if (code == 'ResourceNotFoundError' &&
	    subkey.indexOf('failed to load object') === 0)
		subkey = 'failed to load object ... ';

	if (!this.es_bykey[code].hasOwnProperty(subkey))
		this.es_bykey[code][subkey] = 0;

	this.es_bycode[code]++;
	this.es_bykey[code][subkey]++;
};

ErrorSummary.prototype.print = function (stream)
{
	var codes = Object.keys(this.es_bycode).sort();
	var es = this;

	codes.forEach(function (code) {
		fprintf(stream, '%s  %s\n', pad(6, es.es_bycode[code]), code);

		var messages = Object.keys(es.es_bykey[code]).sort();
		messages.forEach(function (message) {
			fprintf(stream, '      %s  %s\n',
			    pad(6, es.es_bykey[code][message]), message);
		});
	});
};

main();
