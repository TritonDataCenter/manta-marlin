#!/bin/bash
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#

#
# Copyright 2019 Joyent, Inc.
#

#
# mrereport: summarize Marlin activity from a manatee database dump
#

#
# usage: dump usage message and exit non-zero
#
function usage
{
	cat <<EOF >&2
usage: $arg0 START END
       $arg0 INTERVAL

Summarize Marlin activity over the given time period from Moray database dumps.
You may specify either two ISO timestamps START and END, or a symbolic interval
INTERVAL.  INTERVAL supports constructions like "yesterday" and intervals like
"1h".  Intervals like "1h" ("one hour") are relative to the previous top of the
hour.  So at 3:07pm, "1h" denotes activity between 2pm and 3pm.

Results are cached locally so that re-runs are quick.
EOF
	exit 2
}

#
# fail MSG: print MSG to stderr and exit non-zero
#
function fail
{
	echo "$arg0: $@" >&2
	rm -f $er_objtmpfile
	mrm $er_tarball 2> /dev/null
	exit 1
}

#
# date_resolve STRING: given a user-entered date string, resolve it to a full
# ISO-formatted string.
#
function date_resolve
{
	node -pe "new Date($1).toISOString()"
}

#
# date_extract_hour STRING: given an ISO date string, return an ISO date string
# denoting the top of that hour.
#
function date_extract_hour
{
	echo "${1:0:14}00:00Z"
}

#
# date_extract STRING: given an ISO date string, return an ISO date string
# denoting midnight on that date.
#
function date_extract
{
	echo "${1:0:10}T00:00:00Z"
}

#
# date_add STRING NUM: given an ISO date string and a number of seconds to add,
# return the corresponding ISO date string.
#
function date_add
{
	local script
	script="new Date(Date.parse(\"$1\") + parseInt($2 * 1000, 10))"
	script="$script.toISOString()"
	node -pe "$script"
}

#
# date_to_epoch STRING: given an ISO date string, return the corresponding Unix
# timestamp.
#
function date_to_epoch
{
	node -pe "Math.floor(Date.parse(\"$1\") / 1000)"
}

#
# unpack_interval STRING: given a relative time interval, resolve it to a pair
# of ISO-formatted date strings.
#
function unpack_interval
{
	local nowts unit

	nowts=$(date_resolve)

	if [[ $1 == "yesterday" ]]; then
		er_enddate=$(date_extract $nowts)
		er_startdate=$(date_add $er_enddate -86400)
		return;
	fi

	er_enddate=$(date_extract_hour $nowts)
	unit="${1:(( ${#1} - 1 )):1}"

	num="${1:0:(( ${#1} - 1 ))}"
	if [[ -z $num || $num =~ /[^0-9]/ ]]; then
		fail "unsupported interval: \"$1\""
	fi

	case "$unit" in
	m) 	num=$(( num * 60 )) ;;
	h)	num=$(( num * 60 * 60 )) ;;
	d)	num=$(( num * 60 * 60 * 24 )) ;;
	*)	fail "unsupported interval unit: \"$1\"" ;;
	esac

	er_startdate="$(date_add $er_enddate -$num)"
}

#
# Validate the interval [START, END), and adjust it to the smallest interval of
# Moray database dumps containing that interval.
#
function normalize_interval
{
	local actual_min actual_max
	local actual_min_sec actual_max_sec
	local diff

	actual_min=$(date_extract_hour $1)
	actual_max=$(date_extract_hour $2)
	if [[ $(date_to_epoch $actual_max) -ne $(date_to_epoch $2) ]]; then
		actual_max=$(date_add $actual_max 3600)
	fi

	echo "requested interval: $1 to $2" >&2
	echo "(will scan activity between $actual_min and" "$actual_max)" >&2

	actual_min_sec=$(date_to_epoch $actual_min)
	actual_max_sec=$(date_to_epoch $actual_max)
	diff=$(( actual_max_sec - actual_min_sec ))
	if [[ $diff -le 0 ]]; then
		fail "$arg0: interval invalid or too short"
	fi

	if [[ $diff -gt 86400 ]]; then
		fail "$arg0: interval too long (max: 24h period)"
	fi

	er_startdate_actual="$actual_min"
	er_enddate_actual="$actual_max"
}

#
# enum_objects START END: enumerate the moray objects required to analyze errors
# over the period [START, END).  It's not currently supported to operate over
# more than one database dump, so this only ever enumerates the dumps for a
# specific hour.
#
function enum_objects
{
	#
	# Since we only actually support operating on a single hour's database
	# dump, we just use the dump denoted by the end time.  We've already
	# rounded up to the next hour, so we need to subtract one hour from
	# that.
	#
	local tmpfile endtime subpath

	tmpfile="$er_objtmpfile"
	endtime="$(date_add $2 -3600)"
	subpath="/${endtime:0:4}/${endtime:5:2}/${endtime:8:2}/${endtime:11:2}"

	set -o pipefail
	mfind -t o "$er_base$subpath" | egrep 'jobs|errors|tasks' | \
	    tee /dev/stderr > $tmpfile || fail "mfind: failed"
	set +o pipefail
	if [[ $(wc -l < $tmpfile) -ne 3 ]]; then
		fail "wrong number of input objects"
	fi
	cat $tmpfile
	rm -f $tmpfile
}

#
# report FILE: generate a report from the given output
#
function report
{
	node client/sbin/mrereport-report.js < $er_outfile
}


arg0="$(basename $0)"

# Manta directory where manatee dumps go
er_base="/poseidon/stor/manatee_backups/1.moray.us-east.joyent.us"
# Manta object where we'll put our assets tarball
er_tarball="/$MANTA_USER/stor/mrereport-$$.tgz"
# Manta object where the mola assets live
er_molatgz="/poseidon/stor/manta_pg_job/assets/mola.tar.gz"
# Local temporary file for storing the input objects for our job
er_objtmpfile="${TMPDIR-/var/tmp}/mrereport-$$-objects"
# Local output file for caching the results
er_outfile="${TMPDIR:-/var/tmp}/mrereport"

# User-requested start and end date/time
er_startdate=
er_enddate=
# Actual start and end date/time (rounded to nearby hours)
er_startdate_actual=
er_enddate_actual=

if [[ $# -eq 1 ]]; then
	unpack_interval "$1"
elif [[ $# -eq 2 ]]; then
	er_startdate="$(date_resolve "\"$1\"")"
	er_enddate="$(date_resolve "\"$2\"")"
else
	usage
fi

er_outfile="$er_outfile-$er_startdate-$er_enddate"
normalize_interval $er_startdate $er_enddate

er_dir="${BASH_SOURCE[0]}"
[[ -h "$er_dir" ]] && er_dir="$(readlink -f "$er_dir")"
er_dir="$(dirname "$er_dir")"
cd "$er_dir/../.."

if [[ -f "$er_outfile" ]]; then
	echo "using cached results" >&2
	report $er_outfile
else
	tar czf - client/sbin node_modules | mput $er_tarball
	jobid=$(set -o pipefail; \
	    enum_objects $er_startdate_actual $er_enddate_actual | \
	    mjob create \
	    -s "$er_tarball" -s "$er_molatgz" \
	    --init="tar xzf /assets/$er_molatgz && \
	        tar xzf /assets/$er_tarball" \
	    -m "set -o pipefail; gzcat \$MANTA_INPUT_FILE | \
	        (cd mola; ./build/node/bin/node ./bin/pg_transform.js) | \
		node client/sbin/mrereport-count.js $er_startdate $er_enddate" \
	    -s "$er_tarball" \
	    --init="tar xzf /assets/$er_tarball" \
	    -r "mrm $er_tarball; node client/sbin/mrereport-sum.js | json") || \
	    fail "mjob: failed"
	echo created job $jobid >&2
	mjob watch $jobid > /dev/null || fail "mjob watch: failed"
	mrm $er_tarball 2>/dev/null
	mget $(mjob outputs $jobid) > $er_outfile
	report $er_outfile
fi
