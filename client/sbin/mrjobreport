#!/bin/bash

#
# jobreport: downloads a dump of a job's tasks, parses encoded timestamps, and
# prints summaries of time spent by tasks in various phases of execution.
# Caches data locally to avoid redownloading each time.
#

shopt -s xpg_echo

function fail
{
	echo "$jr_arg0: $*" >&2
	exit 1
}

function usage
{
	[[ -n "$@" ]] && echo "$jr_arg0: $*" >&2
	cat >&2 <<EOF
usage: $jr_arg0 [-f] [-m MORAY_HOST] JOBID

Fetch and summarize runtime information about the given job.  This data is
cached locally so you can rerun it quickly.  With -f, always fetch a fresh copy
and then update the local cache.

The -m argument specifies the hostname of the Marlin Moray shard.  The default
is "localhost".
EOF
	exit 2
}

function tasktimes
{
	local s

	s="this.machine = this.value.machine || 'none'"
	s="$s; this.dispatched = Date.parse(this.value.timeDispatched) || 0"
	s="$s; this.accepted = Date.parse(this.value.timeAccepted) || 0"
	s="$s; this.done  = Date.parse(this.value.timeDone) || 0"
	s="$s; this.started = Date.parse(this.value.timeStarted) || 0"
	s="$s; this.committed = Date.parse(this.value.timeCommitted) || 0"
	
	json -ga -e "$s"	\
	    value.taskId 	\
	    value.mantaComputeId 	\
	    machine		\
	    dispatched		\
	    accepted		\
	    done		\
	    started		\
	    committed
}

# Static configuration
jr_arg0=$(basename $0)
jr_datadir=${TMPDIR:-/var/tmp}/jobreport_data		# path to cache data
jr_tmpfile=/var/tmp/$jr_arg0.$$
jr_hostargs=

# Arguments
opt_f=false						# force cache refresh

while getopts ":fm:" c $@; do
	case "$c" in
	f)	eval opt_$c=true ;;
	m)	jr_hostargs="-h $OPTARG" ;;
	h)	usage ;;
	:)	usage "option requires an argument -- $OPTARG" ;;
	*)	usage "invalid option: $OPTARG" ;;
	esac
done

shift $((OPTIND - 1))
[[ $# == 0 ]] && usage

jr_jobid="$1"						# requested jobid
jr_shortid="${jr_jobid:0:8}"				# shortid used for files
jr_taskfile="$jr_datadir/${jr_shortid}_tasks.json"	# raw tasks file
jr_tasktimesfile="$jr_datadir/${jr_shortid}_times.txt"	# processed times file

hist < /dev/null > /dev/null 2>&1 || \
    fail "\"hist\" command not found (try \"npm install -g hist\")"

mkdir -p "$jr_datadir" || fail "failed to create \"$jr_datadir\""

#
# If we've never seen this job before, download a dump now.
#
[[ $opt_f == "true" ]] && rm -f $jr_taskfile
if [[ ! -f $jr_taskfile ]]; then
	echo "Fetching tasks for job $jr_jobid ... \c "
	findobjects $jr_hostargs -H -l10000 marlin_tasks_v2 "jobId=$jr_jobid" \
	    > $jr_taskfile || fail "failed"
	echo "done."

	rm -f $jr_tasktimesfile
fi

#
# Whether we've downloaded a fresh dump or not, if we haven't parsed the task
# timestamps already, do so now.
#
if [[ ! -f $jr_tasktimesfile ]]; then
	echo "Processing task times for job $jr_jobid ... \c "
	tasktimes < $jr_taskfile > $jr_tasktimesfile || fail "failed"
	echo "done."

	echo ""
fi

#
# Generate the report.
#
cat > $jr_tmpfile <<EOF
{ n["dispatched"]++ }
\$5 > 0 { n["accepted"]++ }
\$6 > 0 { n["done"]++ }
\$7 > 0 { n["started"]++ }
\$8 > 0 { n["committed"]++ }
END {
	printf("%d tasks dispatched\n", n["dispatched"]);

	if (n["accepted"] < n["dispatched"])
		printf("    only %d tasks accepted\n", n["accepted"]);
	if (n["started"] < n["dispatched"])
		printf("    only %d tasks started\n", n["started"]);
	if (n["done"] < n["dispatched"])
		printf("    only %d tasks done\n", n["done"]);
	if (n["committed"] < n["dispatched"])
		printf("    only %d tasks committed\n", n["committed"]);
}
EOF

echo "Job $jr_jobid: \c "
awk -f $jr_tmpfile < $jr_tasktimesfile
rm -f $jr_tmpfile
echo

echo "Task dispatch time (milliseconds, dispatched to accepted)"
awk '$5 > 0 {print $5 - $4}' < $jr_tasktimesfile | hist
echo

echo "Task queue time (milliseconds, accepted to started)"
awk '$7 > 0 {print $7 - $5}' < $jr_tasktimesfile | hist
echo

echo "Task execution time (milliseconds, start to finish)"
awk '$6 > 0 && $7 > 0 {print $6 - $7}' < $jr_tasktimesfile | hist
echo

echo "Task commit time (milliseconds, done to commit)"
awk '$6 > 0 && $8 > 0 {print $8 - $6}' < $jr_tasktimesfile | hist
echo

echo "10 slowest tasks (by execution time)"
cat > $jr_tmpfile <<EOF
\$6 > 0 && \$7 > 0 {
	printf("        %36s %14s %11d ms\n",
	    \$1, substr(\$2, 0, index(\$2, ".joyent.us") - 1), (\$6 - \$7));
}
EOF
printf "        %-36s %-14s %s\n" "TASKID" "SERVER" "EXECUTION TIME"
awk -f $jr_tmpfile < $jr_tasktimesfile | sort -rn -k3,3 | head
rm -f $jr_tmpfile
