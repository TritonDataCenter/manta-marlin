#!/bin/bash

#
# mrgroups: list taskgroups and taskstreams on the local system
#

arg0=$(basename $0)
if [[ -h "$0" ]]; then
	cd $(dirname $0)
	. $(dirname $(readlink "$arg0"))/../tools/util.sh
else
	. $(dirname $0)/../tools/util.sh
fi

function usage
{
	[[ -n "$@" ]] && echo "$arg0: $*" >&2
	cat <<EOF
usage: $arg0 [-j]
       $arg0 [-j | -v] -s

Lists task groups and task streams running on the local system.

Recall that a task group represents the collection of work for a particular user
job phase that could be executed in a single zone.  Groups are executed in one
as one or more streams, each stream executed in one zone.

With no arguments, list groups.  With -s, list streams.  With -j, emit raw JSON.

With -s and -v, list user processes associated with each stream.
EOF
	exit 2
}

#
# list_objects TYPE: list kang objects of a given type
#
function list_objects
{
	#
	# Kang produces lists as an object with key-value pairs for each entry.
	# We want to turn that into an array so we can iterate over the items
	# outside of json(1).  We also want to sort by the key name.
	#
	local script
	script="y = this.$1"
	script="$script; x = Object.keys(y).sort().map("
	script="$script function (k) { return (y[k]); });"
	curlagent /kang/snapshot | json -e "$script" x
}

[[ $(zonename 2>/dev/null) == "global" ]] || \
    fail "system does not appear to be a Manta storage node"

opt_j=false
opt_s=false
opt_v=false

while getopts ":jsv" c $@; do
	case "$c" in
	j|s|v)		eval opt_$c=true ;;
	h)		usage ;;
	:)		usage "option requires an argument -- $OPTARG" ;;
	*)		usage "invalid option: $OPTARG" ;;
	esac
done

if [[ $opt_v == "true" ]]; then
	[[ "$opt_s" == "true" ]] || usage "-v can only be used with -s"
	[[ "$opt_j" == "false" ]] || usage "-j cannot be used with -v"
fi

shift $((OPTIND - 1))
[[ $# -eq 0 ]] || usage "unexpected argument: $1"

if [[ $opt_s == "true" ]]; then
	if [[ $opt_j == "true" ]]; then
		script='this.id = this.pendingUpdate = undefined'
		list_objects taskstream | json -e "$script"
	else
		printf "%-11s %-2s %-36s %-24s\n" \
		    "JOBID" "PH" "ZONE" "LAST START"
		list_objects taskstream | json -a \
		    jobid phasei machine taskStart |
		    while read jobid phasei vm start; do
		    	printf "%8s... %2d %36s %24s\n" ${jobid:0:8} $phasei \
			    $vm $start
			if [[ $opt_v == "true" ]]; then
				ctid=$(svcs -Hoctid -z $vm lackey | tr -d ' ')
				[[ -n "$ctid" && "$ctid" != "-" ]] || continue
				pids="$(pgrep -d, -c "$ctid")"
				[[ -n "$pids" ]] || continue
				ptree "$pids" | tail +2
			fi
		    done
	fi
else
	if [[ $opt_j == "true" ]]; then
		script='this.token = this.mapKeys = this.multiKey'
		script="$script"' = this.groupid = undefined'
		list_objects taskgroup | json -e "$script"
	else
		script='{ printf("%36s %2d %6d %3d %6d %s\n", '
		script="$script"'$1, $2, $3, $4, $5, $6); }'
		printf "%-36s %-2s %-6s %-3s %-6s %s\n" \
		    "JOBID" "PH" "NTASKS" "RUN" "SHARE" "LOGIN"
		list_objects taskgroup | json -a \
		    jobid phasei ntasks nrunning share login | \
		    awk "$script"
	fi
fi
