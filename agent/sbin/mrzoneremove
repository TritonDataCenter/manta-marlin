#!/bin/bash

#
# mrzoneremove zonename: remove a zone from Marlin service in preparation for
# removing it from the system.
#

shopt -s xpg_echo

arg0=$(basename $0)
if [[ -h "$0" ]]; then
	cd $(dirname $0)
	. $(dirname $(readlink "$arg0"))/../tools/util.sh
else
	. $(dirname $0)/../tools/util.sh
fi

function zone_wait_state
{
	local zonename=$1
	local endstate=$2

	while true; do
		state="$(curlagent /zones | json -a zonename state | 
		    nawk "\$1 == \"$zonename\" { print \$2 }")"
		[[ "$state" == "$endstate" ]] && break
		sleep 1
	done
}

function zone_remove
{
	local zonename=$1

	#
	# The zone must be disabled by the time we set tags.manta_compute.
	# Otherwise, it's possible that marlin will decide to reset this zone,
	# rolling back the zone's dataset -- including our change to its tags.
	#
	if ! echo '{ "set_tags": { "manta_compute": "removed" } }' | \
	    vmadm update $zonename; then
		echo "$arg0: failed to mark zone \"$zonename\" removed" >&2
		return 1
	fi

	if ! curlagent /zones/$zonename -XDELETE > /dev/null; then
		echo "$arg0: failed to remove zone \"$zonename\"" >&2
		return 1
	fi
}

if [[ $# -ne 1 ]]; then
	echo "usage: $arg0 ZONENAME" >&2
	echo "Permanently remove a zone from Marlin service in preparation" >&2
	echo "for destroying it." >&2
	exit 2
fi

mr_zonename="$1"

echo -n "Checking for zone \"$mr_zonename\" ... \c "
if ! curlagent /zones | json -a zonename | grep ^$mr_zonename\$ >/dev/null; then
	echo "zone already gone."
	exit 0
fi
echo "done."

echo -n "Disabling zone \"$mr_zonename\" ... \c "
zone_disable $mr_zonename || fail "failed"
echo "done."

echo -n "Waiting for zone \"$mr_zonename\" to quiesce ... \c "
zone_wait_state $mr_zonename "disabled" || fail "failed"
echo "done."

echo -n "Removing zone \"$mr_zonename\" ... \c "
zone_remove $mr_zonename || fail "failed"
echo "done."
