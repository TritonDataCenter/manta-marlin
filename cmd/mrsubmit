#!/usr/bin/env node

/*
 * mrsubmit: submit jobs directly to Marlin via Moray (i.e. not through Muskie)
 * This is a dev tool.
 */

var mod_assert = require('assert');
var mod_path = require('path');
var mod_url = require('url');

var mod_bunyan = require('bunyan');
var mod_extsprintf = require('extsprintf');
var mod_getopt = require('posix-getopt');
var mod_jsprim = require('jsprim');
var mod_uuid = require('node-uuid');
var mod_vasync = require('vasync');
var mod_wordwrap = require('wordwrap');
var wrap = mod_wordwrap(80);

var mod_mautil = require('../lib/util');
var mod_moray = require('moray');
var mod_worker = require('../lib/worker/worker');

var msArg0 = mod_path.basename(process.argv[1]);
var msUsage = mod_extsprintf.sprintf([
    'usage: %s [-c NKEYS] [-i id] [-n name] [-m exec] [-r exec] ...',
    '',
    '    Submits a new job to Marlin via Moray.',
    '',
    'OPTIONS',
    '',
    '    -c nkeys       Submit "nkeys" input keys with the job',
    '    -i id          Use "id" for the job\'s id',
    '    -m exec        Append a map phase with body "exec"',
    '    -n name	Use "name" for the job\'s name',
    '    -r exec        Append a reduce phase with body "exec"',
    '',
    'EXAMPLE: Word count 10 files',
    '    # %s -c 10 -m wc -r "awk {sum += $1} END { print sum; }"'
].join('\n'), msArg0, msArg0);

var msCount = 0;
var msPhases = [];
var msJobName = 'mrsubmit job';
var msJobId = mod_uuid.v4();
var msMorayUrl = process.env['MORAY_URL'];

var msBuckets;	/* bucket names */
var msClient;	/* Moray client */
var msLog;	/* bunyan logger */

function usage()
{
	console.error(msUsage);
	process.exit(2);
}

function main()
{
	var parser, option, conf, urlconf;

	parser = new mod_getopt.BasicParser('c:m:n:r:', process.argv);

	while ((option = parser.getopt()) !== undefined) {
		switch (option.option) {
		case 'c':
			msCount = parseInt(option.optarg, 10);
			if (isNaN(msCount)) {
				console.error('%s: invalid count: %s',
				    msArg0, option.optarg);
				usage();
			}
			break;

		case 'i':
			msJobId = option.optarg;
			break;

		case 'n':
			msJobName = option.optarg;
			break;

		case 'm':
		case 'r':
			msPhases.push({
			    'type': option.option == 'm' ?
				'storage-map' : 'reduce',
			    'exec': option.optarg
			});
			break;

		default:
			/* error message already emitted by getopt */
			mod_assert.equal('?', option.option);
			usage();
			break;
		}
	}

	if (!msMorayUrl) {
		console.error('MORAY_URL must be specified in the environment');
		process.exit(2);
	}

	/* XXX commonize with mrstat */
	msLog = new mod_bunyan({
	    'name': msArg0,
	    'level': process.env['LOG_LEVEL'] || 'info',
	    'stream': process.stderr
	});

	conf = mod_mautil.readConf(msLog, mod_worker.mwConfSchema,
	    mod_path.join(__dirname, '../etc/config.coal.json'));
	msBuckets = conf['buckets'];
	mod_assert.ok(msBuckets['job']);
	mod_assert.ok(msBuckets['jobinput']);
	mod_assert.ok(msBuckets['task']);
	mod_assert.ok(msBuckets['taskinput']);
	mod_assert.ok(msBuckets['taskoutput']);

	urlconf = mod_url.parse(msMorayUrl);

	msClient = mod_moray.createClient({
	    'host': urlconf['hostname'],
	    'port': Math.floor(urlconf['port']),
	    'log': msLog
	});

	msClient.on('connect', submit);
}

function submit()
{
	mod_vasync.pipeline({
		'funcs': [
		    submitInput,
		    submitJob
		]
	}, function (err) {
		if (err) {
			console.error('%s: %s', msArg0, err.message);
			process.exit(1);
		}

		console.log(msJobId);
		msClient.close();
	});
}

/*
 * Unlike what muskie would do, we submit input first, because we happen to
 * know what the job id will be and this gets us out of submitting the job
 * record first.
 */
function submitInput(_, next)
{
	/* XXX */
	next();
}

function submitJob(_, next)
{
	var now = mod_jsprim.iso8601(Date.now());
	var job;

	if (msPhases.length === 0)
		msPhases.push({ 'type': 'storage-map', 'exec': 'echo' });

	job = {
	    'jobId': msJobId,
	    'jobName': msJobName,
	    'owner': process.env['USER'] || 'nobody',
	    'phases': msPhases,
	    'state': 'queued',
	    'timeCreated': now,
	    'timeInputDone': now
	};

	msClient.putObject(msBuckets['job'], msJobId, job, next);
}

main();
