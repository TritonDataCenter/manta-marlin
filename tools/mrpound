#!/usr/bin/env node

/*
 * tools/mrpound: fetch a given Moray record, then attempt to keep overwriting
 * it with a slight change, conditional on the etag.  This is mostly innocuous
 * with respect to the data (since it only adds and modifies a separate
 * property), but can be used to induce etag conflicts on other clients for
 * testing.
 */

var mod_path = require('path');
var mod_url = require('url');

var mod_bunyan = require('bunyan');
var mod_extsprintf = require('extsprintf');
var mod_moray = require('moray');
var sprintf = mod_extsprintf.sprintf;

var mpArg0;
var mpUrl;
var mpBucket;
var mpKey;
var mpValue;
var mpEtag;

var mpClient;
var mpLog;
var mpCount = 0;

function main()
{
	mpArg0 = mod_path.basename(process.argv[1]);

	if (process.argv.length != 4) {
		console.error('usage: %s bucket key', mpArg0);
		process.exit(2);
	}

	mpBucket = process.argv[2];
	mpKey = process.argv[3];

	mpUrl = process.env['MORAY_URL'];
	if (!mpUrl)
		fatal('MORAY_URL must be specified in the environment.\n');

	mpLog = new mod_bunyan({
	    'name': mpArg0,
	    'level': process.env['LOG_LEVEL'] || 'info'
	});

	var url = mod_url.parse(mpUrl);

	mpClient = mod_moray.createClient({
	    'log': mpLog.child({ 'component': 'client' }),
	    'host': url['hostname'],
	    'port': parseInt(url['port'], 10)
	});

	mpClient.on('connect', go);
}

function fatal(/* fmt, ... */)
{
	var args = Array.prototype.slice.call(arguments);
	var message = sprintf.apply(null, args);
	process.stderr.write(sprintf('%s: %s', mpArg0, message));
	process.exit(1);
}

function go()
{
	mpClient.getObject(mpBucket, mpKey, { 'noCache': true },
	    function (err, record) {
		if (err)
			fatal('failed to fetch record: %s\n',
			    err.message);

		mpValue = record['value'];
		mpValue['_' + mpArg0] = mpCount++;
		mpEtag = record['_etag'];

		mpClient.putObject(mpBucket, mpKey, mpValue, { 'etag': mpEtag },
		    function (suberr) {
			if (suberr)
				fatal('failed to update record: %s\n',
				    suberr.message);

			mpValue['_' + mpArg0]++;
			go();
		    });
	    });
}

main();
