#!/bin/bash

#
# mragentconf manta-compute-id manta-url moray-url
#             name-service-1 [name-service-2 ...]
# Reconfigures the Marlin agent with the specified URLs and name servers.
#

mac_arg0=$(basename $0)

function usage
{
	echo -n "usage: $mac_arg0 mantacomputeid mantaurl morayurl " >&2
	echo "nameservice1 ..." >&2
	exit 2
}

function fail
{
	echo "$*" >&2
	exit 1
}

[[ $# -gt 3 ]] || usage

PATH=$PATH:/usr/sbin

mac_manta_compute_id=$1
mac_serverid=$(sysinfo | json UUID)
mac_manta_host=$2
mac_moray_host=$3
mac_root=$(dirname $0)/..
mac_confdir=/opt/smartdc/marlin/etc
mac_smfdir=/opt/smartdc/agents/smf

mac_code="instanceUuid='$mac_serverid'"
mac_code="$mac_code; mantaComputeId='$mac_manta_compute_id'"
mac_code="$mac_code; moray.url='tcp://$mac_moray_host:2020'"
mac_code="$mac_code; manta.url='http://$mac_manta_host:80/'"
mac_code="$mac_code; dns.nameservers = []"

mkdir -p "$mac_confdir" || fail "failed to mkdir $mac_confdir"

shift 3
mac_nameservers="$(/usr/node/bin/node \
    -pe 'JSON.stringify(process.argv.slice(1))' "$@")"
for ns in "$@"; do
	mac_code="$mac_code; dns.nameservers.push('$ns')"
done

#
# Update the configuration file, if it doesn't already exist.  We avoid blowing
# away whatever's there in case of hand-patched configuration.  This should be
# better handled by SAPI-38.
#
# We also re-export our service manifest to reflect the service's new enabled
# state.
#
if [[ ! -e $mac_confdir/agentconfig.json ]]; then
	json -e "$mac_code" < $mac_root/etc/agentconfig.coal.json > \
	    $mac_confdir/agentconfig.json || fail "failed to rewrite config"
	svcadm disable -st marlin-agent || fail "failed to disable marlin-agent"
	svcadm enable -s marlin-agent || fail "failed to enable marlin-agent"
	svccfg export marlin-agent > $mac_smfdir/marlin-agent.xml || \
	    fail "failed to save marlin-agent manifest"
	echo "updated marlin agent configuration"
else
	echo "skipping agent reconfiguration (file already present)"
fi

#
# Copy the ssh keys from the local mako zone, if present.
#
if [[ ! -f $mac_confdir/id_rsa || ! -f $mac_confdir/id_rsa.pub ]]; then
	mac_mako="$(vmadm lookup tags.manta_role=storage | tail -1)"
	if [[ -z "$mac_mako" ]]; then
		echo "skipping private key copy (no mako zone found)"
	else
		cp /zones/$mac_mako/root/root/.ssh/id_rsa \
		   $mac_confdir/id_rsa || fail "failed to copy private key"
		cp /zones/$mac_mako/root/root/.ssh/id_rsa.pub \
		   $mac_confdir/id_rsa.pub || fail "failed to copy public key"
		echo "copied private keys from zone $mac_mako"
	fi
else
	echo "skipping private key copy (keys already present)"
fi


# Write out a configuration file for log rotation.
cat > $mac_confdir/logpush.json <<EOF || fail "failed to write logpush.json"
{
	"logroot": "/var/log/manta/upload",
	"nameservers": $mac_nameservers,
	"manta": {
		"user": "poseidon",
		"host": "$mac_manta_host",
		"keypath": "/opt/smartdc/marlin/etc/id_rsa",
		"logroot": "/poseidon/stor/logs"
	}
}
EOF
echo "wrote logpush.json"

# Add the log rotator entries to the crontab.
mac_tmpfile=/var/tmp/$mac_arg0.$$
if ! crontab -l | grep logpush.json > /dev/null ||
   ! crontab -l | grep mrlogexpire > /dev/null; then
	echo "1,2,3,4,5 * * * * $mac_root/sbin/logpush.sh " \
	    "$mac_confdir/logpush.json >> " \
	    "/var/log/mbackup.log 2>&1" > $mac_tmpfile || \
	    fail "failed to append"
	echo "0 0 * * * $mac_root/sbin/mrlogexpire.sh " \
	    ">> /var/log/mrlogexpire.log 2>&1" >> $mac_tmpfile ||
	    fail "failed to append (2)"
	crontab $mac_tmpfile || fail "failed to load $mac_tmpfile"
	rm -f $mac_tmpfile
	echo "updated crontab"
else
	echo "skipping crontab update (already done)"
fi
